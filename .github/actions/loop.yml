name: BURAYA BAK
on: 
  push:
 
env:
  # ECS Cluster
  ECS_CLUSTER: pandora-sandbox-cluster-v2
  
  # Task Definitions
  ECS_MAIN_TASK_DEFINITION: pandora-main-sandbox-task-definition
  ECS_ORGANIZATIONS_TASK_DEFINITION: pandora-organizations-sandbox-task-definition
  ECS_OTC_TASK_DEFINITION: pandora-otc-sandbox-task-definition

  # Local Task Definition File Paths
  ECS_MAIN_TASK_DEFINITION_FILE_PATH: ./ecs-main-task-definition.json
  ECS_ORGANIZATIONS_TASK_DEFINITION_FILE_PATH: ./ecs-organizations-task-definition.json
  ECS_OTC_TASK_DEFINITION_FILE_PATH: ./ecs-otc-task-definition.json

  # Services Under pandora-sandbox-cluster
  ECS_MAIN_SERVICE: pandora-main-sandbox-service
  ECS_ORGANIZATIONS_SERVICE: pandora-organizations-sandbox-service
  ECS_OTC_SERVICE: pandora-otc-sandbox-service

  # ECR Repositories
  ECR_MAIN_REPOSITORY: pandora-main/sandbox
  ECR_ORGANIZATIONS_REPOSITORY: pandora-organizations/sandbox
  ECR_OTC_REPOSITORY: pandora-otc/sandbox

jobs:
  # loope_test:
  #   name: loop test
  #   strategy:
  #     matrix:
  #       machine_architecture: [32, 64]
  #   runs-on: ubuntu-latest
  #   steps:
  #     # - name: run loop
  #     #   env:
  #     #     REPOSITORIES: ${{env.ECR_MAIN_REPOSITORY}} ${{env.ECR_ORGANIZATIONS_REPOSITORY}} ${{env.ECR_OTC_REPOSITORY}}
  #     #     DENEME: A B C
  #     #   run: |
  #     #     for x in $REPOSITORIES; do
  #     #       if [ $x == pandora-main/sandbox ]; then
  #     #         echo A
  #     #       elif [ $x == pandora-organizations/sandbox ]; then
  #     #         echo B
  #     #       elif [ $x == pandora-otc/sandbox ]; then
  #     #         echo C
  #     #       fi
  #     #     done
  #     #   shell: bash

  #     - name: deneme
  #       env:
  #         someObject: {test:}
  #       run: |
  #         echo ${{ fromJson('{ 32: "i386", 64: "x86_64" }')[machine_architecture] }}
  #       shell: bash

  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.value }}
    steps:
      - id: matrix
        run: |
          echo '::set-output name=value::[\"a\", \"b\", \"c\"]'
  build:
    needs: [ setup ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        value: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - run: |
          echo "${{ matrix.value }}"


